<?php

class PageNotFoundTest extends DrupalWebTestCase{
  protected $priviliged_user;

  public static function getInfo() {
    return array(
      'name' => '404 Page not found',
      'description' => 'Check that the custom error message is displayed when a page is not found.',
      'group' => 'CustomError',
    );
  }

  public function setUp() {
    //Enabling the module required for the test
    parent::setUp('customerror');
    $this->priviliged_user = $this->drupalCreateUser(array(
      'access content',
      ));
    $this->drupalLogin($this->priviliged_user);
  }
  /**
   * Tests 404 pages.
   */
 function testPageNotFoundMessage() {

    /* Set title and text of error message */
    $error_code = 404;
    $title = $this->randomName($number = 10, $prefix = 'simpletest_');
    $this->drupalVariableSet('customerror_'. $error_code .'_title', $title);

    $description = $this->randomName($number = 512, $prefix = 'simpletest_');
    $this->drupalVariableSet('customerror_'. $error_code, $description);

    /* Access error page directly, check for title and text of error message */
    $this->drupalGet('customerror/'. $error_code);
    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed directly');
    $this->assertText($description, 'Description on '. $error_code .' error page set when accessed directly');

    /* Point Drupal to the new error message */
    $this->drupalVariableSet('site_'. $error_code, 'customerror/'. $error_code);

    /* Log in as a user with basic privileges */
/*    $user = $this->drupalCreateUserRolePerm(array('access content'));
    $this->drupalLoginUser($user);

    /* Access next node ID, shouldn't exist yet. Note that this increments the nid each time it's run. */
    $this->drupalGet('node/'. db_next_id());

    /* Check for response code, title and text of error message */
    $this->assertResponse($error_code, 'Response code on '. $error_code .' error page set when accessed at non-existent URL');
    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed at non-existent URL');
    $this->assertText($description, 'Description on '. $error_code .' error page set when accessed at non-existent URL');
 
    /* Could also create node, prove it's accessible, delete it, then try to access again and prove it's gone */

  }

}
