<?php

/**
 * Test the functionality of the Simpletest example content
 */
class SimpletestExampleTestCase2 extends DrupalWebTestCase {
  protected $privileged_user;
  
  /**
   * Implements getInfo() to make the test available to the Simpletest 
   * testing interface
   */
  public static function getInfo() {
    //Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Simpletest Example 2',
      'description' => 'Ensure that the simpletest_example content type functions properly.',
      'group' => 'Examples',  
    );
  }
  
  public function setUp() {
    //enable any modules required for the test
    parent::setUp('simpletest_example');
    //Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'create simpletest_example content',
      'extra special edit any simpletest_example',
      ));
    $this->drupalLogin($this->privileged_user);
  }
  
 /**
  * Tests creation of a Simpletest example node.
  */
  public function testSimpleTestExampleCreate() {
    //create node to edit
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost("node/add/simpletest-example", $edit, t("Save"));
    $this->assertText(t("Simpletest Example Node Type @title has been created.", array('@title' => $edit['title'])));
  }
  
  /**
   * Tests editing a Simpletest example node
   */
  public function testSimpleTestExampleEdit() {
    $settings = array(
      'type' => 'simpletest_example',
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
      );
    $node = $this->drupalCreateNode($settings);
    //for debugging, we might output the node structure this $this->verbose()
    $this->verbose('Node created:' . var_export($node, true));
    //It would only be output if the test settings have 'verbose' set.
    
    //We'll run this test normally, but not on the testbot, as it would indicate
    //that the examples module was failing tests.
    if (!$this->runningOnTestbot()) {
      //The debug() stament will output infomation into the test results.
      //It can also be used in Drupal 7 anywhere in code and will come out as a 
      // drupal_set_message().
      debug('We are not runnign on the PIFR testing server, so will go ahead and catch the failure.');
      $this->drupalGet("node/{$node->nid}/edit");
      //Make sure we don't get a 401 unauthorized response
      $this->assertResponse(200, t('User is allowed to edit the content'));
    
      //Looking for title text in the page to determine whether we were successfull running edit form.
      $this->assertText(t("@title", array('@title' => $settings['title'])), "Found title in edit form");
    }
  }
  
  /**
   * Detect if we're running on PIFR testbot; skip intentional failure in that
   * case. It happens that on the testbot the site under test is in a directory
   * named 'checkout' or 'site_under_test'.
   *
   * @return boolean
   *   TRUE if running on testbot.
   */
  public function runningOnTestbot() {
    return (file_exists("../checkout") || file_exists("../site_under_test"));
  }
}